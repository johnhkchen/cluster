---
// Fetch data from FastAPI backend via nginx proxy
// Always use internal service URL since this runs on the server
const API_URL = 'http://demo-nginx';

let healthData = null;
let itemsData = null;

try {
  console.log('Fetching from API_URL:', API_URL);
  
  const [healthResponse, itemsResponse] = await Promise.all([
    fetch(`${API_URL}/health`),
    fetch(`${API_URL}/items`)
  ]);

  console.log('Health response status:', healthResponse.status);
  console.log('Items response status:', itemsResponse.status);

  if (healthResponse.ok) {
    healthData = await healthResponse.json();
  }
  
  if (itemsResponse.ok) {
    itemsData = await itemsResponse.json();
  }
} catch (error) {
  console.error('Failed to fetch data:', error);
  console.error('API_URL:', API_URL);
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Demo Stack - Astro Frontend</title>
    <style>
      body {
        font-family: system-ui, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        line-height: 1.6;
      }
      .card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid #e9ecef;
      }
      .status {
        color: #28a745;
        font-weight: bold;
      }
      .error {
        color: #dc3545;
        font-weight: bold;
      }
      .grid {
        display: grid;
        gap: 1rem;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      }
    </style>
  </head>
  <body>
    <h1>üöÄ Demo Stack - GitOps Kubernetes Edge Computing</h1>
    
    <div class="card">
      <h2>üîÑ GitOps Deployment Status</h2>
      <p>‚úÖ <strong>Deployed via FluxCD:</strong> This application is automatically deployed from Git repository</p>
      <p>üì¶ <strong>Stack:</strong> FastAPI (Python 3.13) + Astro (Node.js LTS) + nginx</p>
      <p>üéØ <strong>Platform:</strong> Kind cluster with Kubernetes GitOps workflow</p>
    </div>

    <div class="card">
      <h2>Backend Health Status</h2>
      {healthData ? (
        <div>
          <p class="status">‚úÖ Backend Connected</p>
          <p><strong>Status:</strong> {healthData.status}</p>
          <p><strong>Python Version:</strong> {healthData.python_version}</p>
          <p><strong>Timestamp:</strong> {healthData.timestamp}</p>
        </div>
      ) : (
        <p class="error">‚ùå Backend Unavailable</p>
      )}
    </div>

    <div class="card">
      <h2>Mock Edge Device Data</h2>
      <p><em>Note: These are simulated devices for development and testing purposes.</em></p>
      {itemsData && itemsData.length > 0 ? (
        <div class="grid">
          {itemsData.map((item: any) => (
            <div class="card">
              <h3>{item.name}</h3>
              <p><strong>Type:</strong> {item.type}</p>
              <p><strong>Location:</strong> {item.location}</p>
              <p><strong>Status:</strong> {item.status}</p>
              <p><strong>Last Updated:</strong> {new Date(item.last_updated).toLocaleString()}</p>
            </div>
          ))}
        </div>
      ) : (
        <p>No device data available</p>
      )}
    </div>

    <div class="card">
      <h2>About This Demo</h2>
      <p>This is a demo application showing:</p>
      <ul>
        <li>‚úÖ Astro frontend with server-side rendering</li>
        <li>‚úÖ FastAPI backend with Python 3.13 + uv</li>
        <li>‚úÖ Nginx reverse proxy with rate limiting</li>
        <li>‚úÖ Kubernetes deployment with GitOps</li>
        <li>‚úÖ FluxCD automated deployments</li>
        <li>üéØ Ready for edge computing deployment</li>
      </ul>
    </div>
  </body>
</html>
