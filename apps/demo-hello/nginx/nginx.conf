pid /tmp/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # Logging
  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  # Gzip compression
  gzip on;
  gzip_vary on;
  gzip_min_length 1024;
  gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

  # Rate limiting
  limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
  limit_req_zone $binary_remote_addr zone=web:10m rate=30r/s;

  # Upstream servers
  upstream backend {
      server demo-backend:8000;
  }

  upstream frontend {
      server demo-frontend:3000;
  }

  server {
      listen 80;
      server_name localhost;

      # Security headers
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;

      # API routes
      location /api/ {
          limit_req zone=api burst=20 nodelay;

          # Remove /api prefix and proxy to backend
          rewrite ^/api/(.*)$ /$1 break;
          proxy_pass http://backend;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # Timeouts
          proxy_connect_timeout 30s;
          proxy_send_timeout 30s;
          proxy_read_timeout 30s;
      }

      # Nginx health check (doesn't depend on backend)
      location = /nginx-health {
          access_log off;
          return 200 "healthy\n";
          add_header Content-Type text/plain;
      }

      # Backend API endpoints (exact matches have priority)
      location = /health {
          limit_req zone=api burst=10 nodelay;
          proxy_pass http://backend/health;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }

      location = /items {
          limit_req zone=api burst=10 nodelay;
          proxy_pass http://backend/items;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }

      location = /docs {
          limit_req zone=api burst=10 nodelay;
          proxy_pass http://backend/docs;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }

      location = /openapi.json {
          limit_req zone=api burst=10 nodelay;
          proxy_pass http://backend/openapi.json;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }

      # Frontend routes (fallback)
      location / {
          limit_req zone=web burst=50 nodelay;
          proxy_pass http://frontend;

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # WebSocket support (for Astro dev mode)
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
      }

      # Static assets caching
      location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
          expires 1y;
          add_header Cache-Control "public, immutable";
          proxy_pass http://frontend;
      }
  }
}
